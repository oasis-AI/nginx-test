# 建议设置，提升安全性，避免用 root 运行。
# TODO 适配OpenResty
# user  nginx;
user  nobody;

# 自动设置工作进程数量，通常等于 CPU 核心数，提升并发处理能力。
worker_processes  auto;

# 检查当前限制
# ulimit -n
# 高并发场景（如网关、反向代理），建议设置较大值。普通网站可适当降低，默认值一般够用。
worker_rlimit_nofile 655350;

# 建议设置，方便排查问题。日志级别可根据实际需求调整（如 debug、info、notice、warn、error、crit）。
# TODO 适配OpenResty
# error_log  /var/log/nginx/error.log debug;
error_log  /usr/local/openresty/nginx/logs/error.log debug;

# 建议设置，便于进程管理和自动化脚本操作。
pid        /var/run/nginx.pid;


events {
    # 每个 worker 进程最大允许的并发连接数。高并发场景建议设置大一些，普通网站可适当降低（如 1024、4096）。
    worker_connections  655350;
    # 指定使用 epoll 事件模型（仅 Linux 支持），性能高，建议设置。
    use epoll;
    # 一个 worker 进程每次可同时接受多个新连接，提升高并发下的连接处理能力。建议开启。
    multi_accept on;
    # 多 worker 进程时，避免“惊群”现象（多个进程同时抢连接），建议开启。
    accept_mutex on;
    # 设置 accept_mutex 的延迟时间，防止频繁切换。一般默认即可，特殊场景可调整。
    accept_mutex_delay 100ms;
}


http {
    map_hash_bucket_size 1024;
    map_hash_max_size 8192;
    # 引入 MIME 类型定义文件，让 Nginx 能正确识别和返回各种文件类型。建议设置。
    # TODO 适配OpenResty
    # include       /etc/nginx/mime.types;
    include        /usr/local/openresty/nginx/conf/mime.types;
    # 默认响应类型为二进制流（如果没有匹配的 MIME 类型时使用）。建议设置。
    default_type  application/octet-stream;

    # 定义日志格式，main 是格式名。可以自定义日志内容，方便后续分析。建议设置，可根据实际需求调整内容。
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" "$upstream_addr"';
    # 访问日志
    # access_log  /var/log/nginx/access.log  main;
    # 适配OpenResty
    access_log  /usr/local/openresty/nginx/logs/access.log  main;

    # access_log  off;
    # error_log /var/log/nginx/error.log crit;

    ## 文件传输与连接相关
    # 启用高效文件传输，提升静态文件性能。
    sendfile on;
    # 优化 TCP 包发送，减少包数量（配合 sendfile 使用）。
    tcp_nopush on;
    # 关闭 Nagle 算法，提升响应速度（适合小包高频场景）。
    tcp_nodelay on;
    # 启用异步 I/O，提高高并发下的性能。
    aio on;
    # 大文件传输时直接 I/O，减少内存消耗。
    directio 512;
    
    # 连接管理
    # 长连接超时时间，单位秒。
    keepalive_timeout  300s;
    # 每个长连接最大请求数。
    keepalive_requests 1000000;
    # 超时连接自动重置，防止资源浪费。
    reset_timedout_connection on;
    # 客户端上传内容超时时间。
    client_body_timeout 300s;
    # 客户端发送头部超时时间。
    client_header_timeout 300s;
    # 服务器响应超时时间。
    send_timeout 300s;

    ## 缓冲区相关
    # 代理响应头缓冲区大小。
    proxy_buffer_size 128k;
    # 代理响应体缓冲区数量和大小。
    proxy_buffers 4 256k;
    # 代理高负载时缓冲区大小。
    proxy_busy_buffers_size 256k;
    # 客户端请求体缓冲区大小。
    client_body_buffer_size 512k;
    # 客户端请求头缓冲区大小。
    client_header_buffer_size 64k;
    # 大型请求头缓冲区数量和大小。
    large_client_header_buffers 4 64k;
    # 打开文件缓存最大数量和非活跃时间。
    open_file_cache max=200000 inactive=20s;
    # 文件缓存有效期。
    open_file_cache_valid 30s;
    # 文件缓存最小使用次数。
    open_file_cache_min_uses 2;
    # 缓存文件错误信息。
    open_file_cache_errors on;

    # output_buffers 4 32k;
    
    ## 压缩相关
    # 启用 gzip 压缩，减少带宽。
    gzip on;
    # 超过 1000 字节才压缩。
    gzip_min_length 1000;
    # 压缩等级，1-9，数字越大越耗 CPU。
    gzip_comp_level 4;
    # 指定哪些类型启用压缩。
    gzip_types text/plain text/css application/javascript application/json;
    # 支持 HTTP Vary 头，适应不同客户端。
    gzip_vary on;

    # ## 代理与缓存
    # TODO 适配OpenResty
    # # 设置代理缓存路径、大小、失效时间等。
    # proxy_cache_path /var/cache/nginx/static levels=1:2 
    #                  keys_zone=static_cache:20m 
    #                  max_size=2g 
    #                  inactive=60m 
    #                  use_temp_path=off;
    # # 代理后端读取超时时间。
    # proxy_read_timeout 300s;
    # # 代理后端连接超时时间。
    # proxy_connect_timeout 300s;
    # # 代理后端发送超时时间。
    # proxy_send_timeout 300s;
    
    ## 其他
    # 散列表大小
    # 服务器名哈希桶大小，优化虚拟主机性能。
    server_names_hash_bucket_size 128;
    # 服务器名哈希最大值。
    server_names_hash_max_size 1024;
    # MIME 类型哈希最大值。
    types_hash_max_size 2048;

    # 客户端请求设置
    # 客户端请求体最大允许大小（如上传文件）。
    client_max_body_size 10000m;


    ## 放最后全局参数优先生效
    # 引入所有业务相关的 server 配置文件。
    include /etc/nginx/conf.d/*.conf;
}
